# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc_api.protos import news_getter_pb2 as news__getter__pb2


class NewsGetterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchNews = channel.unary_unary(
                '/news_getter.NewsGetter/SearchNews',
                request_serializer=news__getter__pb2.SearchNewsRequest.SerializeToString,
                response_deserializer=news__getter__pb2.SearchNewsResponse.FromString,
                )
        self.GetNewsContent = channel.unary_unary(
                '/news_getter.NewsGetter/GetNewsContent',
                request_serializer=news__getter__pb2.GetNewsContentRequest.SerializeToString,
                response_deserializer=news__getter__pb2.GetNewsContentResponse.FromString,
                )
        self.GetListNews = channel.unary_unary(
                '/news_getter.NewsGetter/GetListNews',
                request_serializer=news__getter__pb2.GetListNewsRequest.SerializeToString,
                response_deserializer=news__getter__pb2.GetListNewsResponse.FromString,
                )


class NewsGetterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchNews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewsContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetListNews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NewsGetterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchNews': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchNews,
                    request_deserializer=news__getter__pb2.SearchNewsRequest.FromString,
                    response_serializer=news__getter__pb2.SearchNewsResponse.SerializeToString,
            ),
            'GetNewsContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewsContent,
                    request_deserializer=news__getter__pb2.GetNewsContentRequest.FromString,
                    response_serializer=news__getter__pb2.GetNewsContentResponse.SerializeToString,
            ),
            'GetListNews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetListNews,
                    request_deserializer=news__getter__pb2.GetListNewsRequest.FromString,
                    response_serializer=news__getter__pb2.GetListNewsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'news_getter.NewsGetter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NewsGetter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_getter.NewsGetter/SearchNews',
            news__getter__pb2.SearchNewsRequest.SerializeToString,
            news__getter__pb2.SearchNewsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNewsContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_getter.NewsGetter/GetNewsContent',
            news__getter__pb2.GetNewsContentRequest.SerializeToString,
            news__getter__pb2.GetNewsContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetListNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_getter.NewsGetter/GetListNews',
            news__getter__pb2.GetListNewsRequest.SerializeToString,
            news__getter__pb2.GetListNewsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
